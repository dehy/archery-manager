name: 🏹 Archery Manager CI

on:
  push:
    branches: [ main, next ]
  pull_request:
    branches: [ main, next ]

jobs:
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐘 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_pgsql, dom, filter, gd, json, pgsql
        tools: composer:v2
        coverage: xdebug

    - name: 📦 Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: api/vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: 🔽 Install PHP dependencies
      working-directory: ./api
      run: composer install --prefer-dist --no-progress --optimize-autoloader

    - name: 🔧 Setup test environment
      working-directory: ./api
      env:
        DATABASE_URL: postgresql://test:test@127.0.0.1:5432/test?serverVersion=16&charset=utf8
      run: |
        php bin/console doctrine:database:create --env=test
        php bin/console doctrine:migrations:migrate --no-interaction --env=test

    - name: 🧪 Run PHPUnit tests with coverage
      working-directory: ./api
      env:
        DATABASE_URL: postgresql://test:test@127.0.0.1:5432/test?serverVersion=16&charset=utf8
      run: |
        vendor/bin/simple-phpunit --coverage-clover coverage.xml --coverage-xml coverage-xml --log-junit phpunit-report.xml

    - name: 📦 Upload test artifacts
      uses: actions/upload-artifact@v4
      with:
        name: test-reports
        path: |
          api/coverage.xml
          api/coverage-xml/
          api/phpunit-report.xml
        retention-days: 1

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./api/coverage.xml
        flags: api
        name: api-coverage

  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐘 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_pgsql
        tools: composer:v2

    - name: 📦 Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: api/vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: 🔽 Install PHP dependencies
      working-directory: ./api
      run: composer install --prefer-dist --no-progress --optimize-autoloader

    - name: 🔍 Run PHPStan static analysis
      working-directory: ./api
      run: |
        vendor/bin/phpstan analyse src tests --level=2 --error-format=checkstyle --no-progress > phpstan-report.xml || true

    - name: 🎨 Check coding standards
      working-directory: ./api
      run: vendor/bin/php-cs-fixer fix --dry-run --diff --format=checkstyle > php-cs-fixer-report.xml || true

    - name: 📦 Upload code quality artifacts
      uses: actions/upload-artifact@v4
      with:
        name: code-quality-reports
        path: |
          api/phpstan-report.xml
          api/php-cs-fixer-report.xml
        retention-days: 1

  frontend-tests:
    name: 🌐 Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup PNPM
      uses: pnpm/action-setup@v4
      with:
        version: 10

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
        cache-dependency-path: pwa/pnpm-lock.yaml

    - name: 📦 Install PWA dependencies
      working-directory: ./pwa
      run: pnpm install --frozen-lockfile

    - name: 🔍 Run TypeScript checks
      working-directory: ./pwa
      run: pnpm run type-check


    - name: 🎨 Run linting
      working-directory: ./pwa
      run: pnpm run lint

    - name: 🧪 Run PWA tests (if available)
      working-directory: ./pwa
      run: |
        if [ -f "package.json" ] && grep -q '"test"' package.json; then
          pnpm run test --coverage || true
        else
          echo "No tests configured for PWA"
        fi

    - name: 📦 Upload frontend artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-reports
        path: |
          pwa/coverage/
          pwa/lint-results.xml
        retention-days: 1

  sonarqube:
    name: 📊 SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [unit-tests, code-quality, frontend-tests]
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: 📦 Download test artifacts
      uses: actions/download-artifact@v4
      with:
        name: test-reports
        path: api/

    - name: 📦 Download code quality artifacts
      uses: actions/download-artifact@v4
      with:
        name: code-quality-reports
        path: api/

    - name: 📦 Download frontend artifacts
      uses: actions/download-artifact@v4
      if: always()
      with:
        name: frontend-reports
        path: pwa/

    - name: 🔍 SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/next')

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: e2e/package-lock.json

    - name: 📦 Install E2E dependencies
      working-directory: ./e2e
      run: npm ci

    - name: 🐳 Start application stack
      run: docker compose up -d --wait

    - name: 🎭 Run Playwright tests
      working-directory: ./e2e
      run: npx playwright test

    - name: 📦 Upload E2E artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-reports
        path: |
          e2e/test-results/
          e2e/playwright-report/
        retention-days: 7

    - name: 🐳 Stop application stack
      if: always()
      run: docker compose down

  deployment-check:
    name: 🚀 Deployment Check
    runs-on: ubuntu-latest
    needs: [unit-tests, code-quality, frontend-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/next')

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Build Docker images
      run: |
        docker compose -f compose.yaml -f compose.prod.yaml build

    - name: ✅ Deployment ready
      run: echo "🎉 All checks passed! Ready for deployment."
